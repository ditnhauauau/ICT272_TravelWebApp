@model TourDate

@{
    ViewData["Title"] = "Delete Tour Date";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm border-0">
                <div class="card-header bg-danger text-white border-0 py-3">
                    <h3 class="mb-0">
                        <i class="fas fa-exclamation-triangle me-2"></i>Delete Tour Date
                    </h3>
                </div>
                <div class="card-body p-4">
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Danger!</strong> Are you sure you want to delete this tour date?
                        This action cannot be undone and will affect all associated bookings.
                    </div>

                    <div class="tour-info bg-light p-4 rounded mb-4">
                        <h5 class="mb-3">
                            <i class="fas fa-calendar-alt me-2"></i>Tour Date #TD@Html.DisplayFor(model => model.TourDateID)
                        </h5>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <strong>Tour Package:</strong>
                                <p class="mb-1">@Html.DisplayFor(model => model.TourPackage.Title)</p>
                                <small class="text-muted">
                                    @Html.DisplayFor(model => model.TourPackage.Duration) days •
                                    $@Html.DisplayFor(model => model.TourPackage.Price) per person
                                </small>
                            </div>

                            <div class="col-md-6 mb-3">
                                <strong>Available Date:</strong>
                                <p class="mb-1">@Html.DisplayFor(model => model.AvailableDate)</p>
                                @{
                                    string statusClass = Model.Status switch
                                    {
                                        "Available" => "bg-success",
                                        "Full" => "bg-warning",
                                        "Cancelled" => "bg-danger",
                                        _ => "bg-secondary"
                                    };
                                }
                                <span class="badge @statusClass status-badge">@Html.DisplayFor(model => model.Status)</span>
                            </div>

                            @if (!string.IsNullOrEmpty(Model.TourPackage.Description))
                            {
                                <div class="col-md-6 mb-3">
                                    <strong>Destination:</strong>
                                    <p class="mb-1">@Html.DisplayFor(model => model.TourPackage.Description)</p>
                                </div>
                            }

                            <div class="col-md-6 mb-3">
                                <strong>Max Participants:</strong>
                                <p class="mb-1">@Html.DisplayFor(model => model.TourPackage.MaxGroupSize) people</p>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(Model.TourPackage.Description))
                        {
                            <div class="mt-3">
                                <strong>Description:</strong>
                                <p class="mb-0">@Html.DisplayFor(model => model.TourPackage.Description)</p>
                            </div>
                        }
                    </div>

                    <!-- Associated Bookings Warning -->
                    @if (Model.Bookings != null && Model.Bookings.Any())
                    {
                        <div class="alert alert-warning">
                            <h6><i class="fas fa-users me-2"></i>Associated Bookings Impact</h6>
                            <p class="mb-3">
                                <strong>Critical Warning:</strong> This tour date has <strong>@Model.Bookings.Count()</strong>
                                associated booking(s) that will be affected:
                            </p>

                            <div class="table-responsive">
                                <table class="table table-sm table-bordered">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Booking ID</th>
                                            <th>Tourist</th>
                                            <th>Contact</th>
                                            <th>Status</th>
                                            <th>Payment</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var booking in Model.Bookings)
                                        {
                                            <tr>
                                                <td>#@booking.BookingID</td>
                                                <td>@booking.Tourist.FullName</td>
                                                <td>
                                                    @booking.Tourist.Email
                                                    @if (!string.IsNullOrEmpty(booking.Tourist.ContactNumber))
                                                    {
                                                        <br>

                                                        <small>@booking.Tourist.ContactNumber</small>
                                                    }
                                                </td>
                                                <td>
                                                    @{
                                                        string bookingStatusClass = booking.Status switch
                                                        {
                                                            "Confirmed" => "bg-success",
                                                            "Pending" => "bg-warning",
                                                            "Cancelled" => "bg-danger",
                                                            _ => "bg-secondary"
                                                        };
                                                    }
                                                    <span class="badge @bookingStatusClass status-badge">@booking.Status</span>
                                                </td>
                                                <td>
                                                    @{
                                                        string paymentStatusClass = booking.PaymentStatus switch
                                                        {
                                                            "Paid" => "bg-success",
                                                            "Partial" => "bg-warning",
                                                            "Unpaid" => "bg-danger",
                                                            _ => "bg-secondary"
                                                        };
                                                    }
                                                    <span class="badge @paymentStatusClass status-badge">@booking.PaymentStatus</span>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <div class="mt-3">
                                @{
                                    var confirmedBookings = Model.Bookings.Count(b => b.Status == "Confirmed");
                                    var paidBookings = Model.Bookings.Count(b => b.PaymentStatus == "Paid");
                                }

                                @if (confirmedBookings > 0)
                                {
                                    <div class="alert alert-danger mb-2">
                                        <strong>@confirmedBookings confirmed booking(s)</strong> will be cancelled.
                                        Please ensure customers are notified and refunds are processed if necessary.
                                    </div>
                                }

                                @if (paidBookings > 0)
                                {
                                    <div class="alert alert-warning mb-2">
                                        <strong>@paidBookings paid booking(s)</strong> may require refund processing.
                                    </div>
                                }

                                <p class="mb-0">
                                    <strong>Recommendation:</strong> Consider cancelling this tour date instead of deleting it,
                                    or contact all affected customers before proceeding.
                                </p>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Good news!</strong> This tour date has no associated bookings, so it's safe to delete.
                        </div>
                    }

                    <!-- Confirmation Checkbox for dangerous deletions -->
                    @if (Model.Bookings != null && Model.Bookings.Any())
                    {
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" id="confirmDeletion" required>
                            <label class="form-check-label text-danger" for="confirmDeletion">
                                <strong>
                                    I understand that this action will permanently delete this tour date and affect @Model.Bookings.Count() booking(s).
                                    I have notified all affected customers and processed any necessary refunds.
                                </strong>
                            </label>
                        </div>
                    }

                    <form asp-action="Delete" method="post" id="deleteForm">
                        @Html.HiddenFor(model => model.TourDateID)

                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-danger" id="deleteBtn">
                                <i class="fas fa-trash me-2"></i>Delete Tour Date
                            </button>
                            <a asp-action="Details" asp-route-id="@Model.TourDateID" class="btn btn-info">
                                <i class="fas fa-eye me-2"></i>View Details
                            </a>
                            <a asp-action="Index" class="btn btn-secondary">
                                <i class="fas fa-arrow-left me-2"></i>Back to List
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .status-badge {
        font-size: 0.8em;
        padding: 0.4em 0.8em;
        border-radius: 20px;
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('deleteForm');
            const deleteBtn = document.getElementById('deleteBtn');
            const confirmCheckbox = document.getElementById('confirmDeletion');
            const hasBookings = @Json.Serialize(Model.Bookings != null && Model.Bookings.Any());

            if (hasBookings) {
                // Disable delete button initially if there are bookings
                deleteBtn.disabled = true;
                deleteBtn.classList.add('disabled');

                // Enable delete button only when checkbox is checked
                if (confirmCheckbox) {
                    confirmCheckbox.addEventListener('change', function() {
                        if (this.checked) {
                            deleteBtn.disabled = false;
                            deleteBtn.classList.remove('disabled');
                        } else {
                            deleteBtn.disabled = true;
                            deleteBtn.classList.add('disabled');
                        }
                    });
                }
            }

            // Final confirmation before deletion
            form.addEventListener('submit', function(e) {
                const bookingCount = @(Model.Bookings?.Count() ?? 0);

                let confirmMessage;
                if (bookingCount > 0) {
                    confirmMessage = `FINAL CONFIRMATION: You are about to permanently delete this tour date and affect ${bookingCount} booking(s). This action cannot be undone. Type "DELETE" to confirm:`;
                } else {
                    confirmMessage = 'Are you sure you want to delete this tour date? This action cannot be undone.';
                }

                if (bookingCount > 0) {
                    const userInput = prompt(confirmMessage);
                    if (userInput !== 'DELETE') {
                        e.preventDefault();
                        alert('Deletion cancelled. You must type "DELETE" exactly to confirm.');
                    }
                } else {
                    if (!confirm(confirmMessage)) {
                        e.preventDefault();
                    }
                }
            });
        });
    </script>
}